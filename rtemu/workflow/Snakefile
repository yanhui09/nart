#--------------
configfile: "config.yaml"
#--------------
# absolute path
DATABASE_DIR = os.path.abspath(config["database_dir"].rstrip("/"))
DATABASE_PREBUILT = config["emu"]["prebuilt_database"]
CLASSIFIER = config["classifier"]
# use basecall_fq file basename or demux dirname as batch dir
def get_batch_dir(basc_fq = config["basecall_fq"], demux_dir = config["demultiplex_dir"]):
    # only and at least one is allowed
    if basc_fq is not None and demux_dir is not None:
        raise ValueError("Only one of 'basecall_fq' and 'demultiplex_dir' can be specified in config.")
    if basc_fq is None and demux_dir is None:
        raise ValueError("One of 'basecall_fq' and 'demultiplex_dir' must be specified in config.")
    if demux_dir is not None:
        return os.path.basename(demux_dir) + "_b0"
    else:
        return os.path.basename(basc_fq).split(".")[0]
BATCH_ID = get_batch_dir()

def check_val(var, val, class_type):
    if not isinstance(val, class_type):
        warns = ("\n  " + str(var) + " only accepts " + str(class_type) + " values." +
        "\n  " + str(val) + " is used in config.yaml file.")
        raise ValueError(warns)

# check list elements
def check_list_ele(var, val, eles):
    var = var.capitalize()
    if val:
        for i in val:
            if i not in eles:
                raise ValueError("\n  {} parameters not recognized.\n  Please choose from {} in the config.yaml file.".format(var,eles))
    else:
        raise ValueError("\n  {} parameters not specified.\n  Please choose from {} in the config.yaml file.".format(var,eles))

localrules: all, demux, qc
rule all:
    input: "batches/{}_{}.tsv".format(CLASSIFIER, BATCH_ID)

include: "rules/init.smk"
include: "rules/demux.smk"
include: "rules/qc.smk"
include: "rules/profile.smk"

rule demux:
    input: lambda wc: expand("qc/{barcode}.fastq", barcode=get_demux_barcodes(wc))

rule qc:
    input: lambda wc: get_filt(wc),
